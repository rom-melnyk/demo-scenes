(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c="function"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error("Cannot find module '"+i+"'");throw a.code="MODULE_NOT_FOUND",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u="function"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()({1:[function(require,module,exports){
const { renderer } = require('./renderer');


function runDemo() {
    const canvasEl = document.getElementsByTagName('canvas')[0];
    renderer.init(canvasEl);
    console.info(renderer);

    renderer.drawRect(10, 10, 30, 80, { fill: '#dea' });
    renderer.drawRect(50, 80, 80, 20);
}


if (typeof window !== 'undefined') {
    window.runDemo = runDemo;
}

if (typeof module !== 'undefined') {
    module.exports = { runDemo };
}

},{"./renderer":2}],2:[function(require,module,exports){
class Renderer {
    constructor() {
        this.canvas = null;
        this.ctx = null;
    }

    init(canvasEl) {
        if (!(canvasEl instanceof HTMLElement)) {
            throw new Error('Renderer must be initialized with an HTMLElement');
        }

        canvasEl.width = canvasEl.offsetWidth;
        canvasEl.height = canvasEl.offsetHeight;
        this.canvas = canvasEl;
        this.ctx = canvasEl.getContext('2d');
    }

    drawRect(x, y, w, h, { fill } = { fill: '#000000', }) {
        this.ctx.fillStyle = fill;
        this.ctx.fillRect(x, y, w, h);
    }
}

const renderer = new Renderer();

module.exports = { renderer };

},{}]},{},[1])

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm5vZGVfbW9kdWxlcy9icm93c2VyLXBhY2svX3ByZWx1ZGUuanMiLCJzcmMvaW5kZXguanMiLCJzcmMvcmVuZGVyZXIuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7QUNBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDcEJBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsImZpbGUiOiJkZW1vLmpzIiwic291cmNlc0NvbnRlbnQiOlsiKGZ1bmN0aW9uKCl7ZnVuY3Rpb24gcihlLG4sdCl7ZnVuY3Rpb24gbyhpLGYpe2lmKCFuW2ldKXtpZighZVtpXSl7dmFyIGM9XCJmdW5jdGlvblwiPT10eXBlb2YgcmVxdWlyZSYmcmVxdWlyZTtpZighZiYmYylyZXR1cm4gYyhpLCEwKTtpZih1KXJldHVybiB1KGksITApO3ZhciBhPW5ldyBFcnJvcihcIkNhbm5vdCBmaW5kIG1vZHVsZSAnXCIraStcIidcIik7dGhyb3cgYS5jb2RlPVwiTU9EVUxFX05PVF9GT1VORFwiLGF9dmFyIHA9bltpXT17ZXhwb3J0czp7fX07ZVtpXVswXS5jYWxsKHAuZXhwb3J0cyxmdW5jdGlvbihyKXt2YXIgbj1lW2ldWzFdW3JdO3JldHVybiBvKG58fHIpfSxwLHAuZXhwb3J0cyxyLGUsbix0KX1yZXR1cm4gbltpXS5leHBvcnRzfWZvcih2YXIgdT1cImZ1bmN0aW9uXCI9PXR5cGVvZiByZXF1aXJlJiZyZXF1aXJlLGk9MDtpPHQubGVuZ3RoO2krKylvKHRbaV0pO3JldHVybiBvfXJldHVybiByfSkoKSIsImNvbnN0IHsgcmVuZGVyZXIgfSA9IHJlcXVpcmUoJy4vcmVuZGVyZXInKTtcblxuXG5mdW5jdGlvbiBydW5EZW1vKCkge1xuICAgIGNvbnN0IGNhbnZhc0VsID0gZG9jdW1lbnQuZ2V0RWxlbWVudHNCeVRhZ05hbWUoJ2NhbnZhcycpWzBdO1xuICAgIHJlbmRlcmVyLmluaXQoY2FudmFzRWwpO1xuICAgIGNvbnNvbGUuaW5mbyhyZW5kZXJlcik7XG5cbiAgICByZW5kZXJlci5kcmF3UmVjdCgxMCwgMTAsIDMwLCA4MCwgeyBmaWxsOiAnI2RlYScgfSk7XG4gICAgcmVuZGVyZXIuZHJhd1JlY3QoNTAsIDgwLCA4MCwgMjApO1xufVxuXG5cbmlmICh0eXBlb2Ygd2luZG93ICE9PSAndW5kZWZpbmVkJykge1xuICAgIHdpbmRvdy5ydW5EZW1vID0gcnVuRGVtbztcbn1cblxuaWYgKHR5cGVvZiBtb2R1bGUgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgbW9kdWxlLmV4cG9ydHMgPSB7IHJ1bkRlbW8gfTtcbn1cbiIsImNsYXNzIFJlbmRlcmVyIHtcbiAgICBjb25zdHJ1Y3RvcigpIHtcbiAgICAgICAgdGhpcy5jYW52YXMgPSBudWxsO1xuICAgICAgICB0aGlzLmN0eCA9IG51bGw7XG4gICAgfVxuXG4gICAgaW5pdChjYW52YXNFbCkge1xuICAgICAgICBpZiAoIShjYW52YXNFbCBpbnN0YW5jZW9mIEhUTUxFbGVtZW50KSkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdSZW5kZXJlciBtdXN0IGJlIGluaXRpYWxpemVkIHdpdGggYW4gSFRNTEVsZW1lbnQnKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGNhbnZhc0VsLndpZHRoID0gY2FudmFzRWwub2Zmc2V0V2lkdGg7XG4gICAgICAgIGNhbnZhc0VsLmhlaWdodCA9IGNhbnZhc0VsLm9mZnNldEhlaWdodDtcbiAgICAgICAgdGhpcy5jYW52YXMgPSBjYW52YXNFbDtcbiAgICAgICAgdGhpcy5jdHggPSBjYW52YXNFbC5nZXRDb250ZXh0KCcyZCcpO1xuICAgIH1cblxuICAgIGRyYXdSZWN0KHgsIHksIHcsIGgsIHsgZmlsbCB9ID0geyBmaWxsOiAnIzAwMDAwMCcsIH0pIHtcbiAgICAgICAgdGhpcy5jdHguZmlsbFN0eWxlID0gZmlsbDtcbiAgICAgICAgdGhpcy5jdHguZmlsbFJlY3QoeCwgeSwgdywgaCk7XG4gICAgfVxufVxuXG5jb25zdCByZW5kZXJlciA9IG5ldyBSZW5kZXJlcigpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IHsgcmVuZGVyZXIgfTtcbiJdLCJwcmVFeGlzdGluZ0NvbW1lbnQiOiIvLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247Y2hhcnNldD11dGYtODtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSnpiM1Z5WTJWeklqcGJJbTV2WkdWZmJXOWtkV3hsY3k5aWNtOTNjMlZ5TFhCaFkyc3ZYM0J5Wld4MVpHVXVhbk1pTENKemNtTXZhVzVrWlhndWFuTWlMQ0p6Y21NdmNtVnVaR1Z5WlhJdWFuTWlYU3dpYm1GdFpYTWlPbHRkTENKdFlYQndhVzVuY3lJNklrRkJRVUU3UVVOQlFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdPMEZEY0VKQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRU0lzSW1acGJHVWlPaUpuWlc1bGNtRjBaV1F1YW5NaUxDSnpiM1Z5WTJWU2IyOTBJam9pSWl3aWMyOTFjbU5sYzBOdmJuUmxiblFpT2xzaUtHWjFibU4wYVc5dUtDbDdablZ1WTNScGIyNGdjaWhsTEc0c2RDbDdablZ1WTNScGIyNGdieWhwTEdZcGUybG1LQ0Z1VzJsZEtYdHBaaWdoWlZ0cFhTbDdkbUZ5SUdNOVhDSm1kVzVqZEdsdmJsd2lQVDEwZVhCbGIyWWdjbVZ4ZFdseVpTWW1jbVZ4ZFdseVpUdHBaaWdoWmlZbVl5bHlaWFIxY200Z1l5aHBMQ0V3S1R0cFppaDFLWEpsZEhWeWJpQjFLR2tzSVRBcE8zWmhjaUJoUFc1bGR5QkZjbkp2Y2loY0lrTmhibTV2ZENCbWFXNWtJRzF2WkhWc1pTQW5YQ0lyYVN0Y0lpZGNJaWs3ZEdoeWIzY2dZUzVqYjJSbFBWd2lUVTlFVlV4RlgwNVBWRjlHVDFWT1JGd2lMR0Y5ZG1GeUlIQTlibHRwWFQxN1pYaHdiM0owY3pwN2ZYMDdaVnRwWFZzd1hTNWpZV3hzS0hBdVpYaHdiM0owY3l4bWRXNWpkR2x2YmloeUtYdDJZWElnYmoxbFcybGRXekZkVzNKZE8zSmxkSFZ5YmlCdktHNThmSElwZlN4d0xIQXVaWGh3YjNKMGN5eHlMR1VzYml4MEtYMXlaWFIxY200Z2JsdHBYUzVsZUhCdmNuUnpmV1p2Y2loMllYSWdkVDFjSW1aMWJtTjBhVzl1WENJOVBYUjVjR1Z2WmlCeVpYRjFhWEpsSmlaeVpYRjFhWEpsTEdrOU1EdHBQSFF1YkdWdVozUm9PMmtyS3lsdktIUmJhVjBwTzNKbGRIVnliaUJ2ZlhKbGRIVnliaUJ5ZlNrb0tTSXNJbU52Ym5OMElIc2djbVZ1WkdWeVpYSWdmU0E5SUhKbGNYVnBjbVVvSnk0dmNtVnVaR1Z5WlhJbktUdGNibHh1WEc1bWRXNWpkR2x2YmlCeWRXNUVaVzF2S0NrZ2UxeHVJQ0FnSUdOdmJuTjBJR05oYm5aaGMwVnNJRDBnWkc5amRXMWxiblF1WjJWMFJXeGxiV1Z1ZEhOQ2VWUmhaMDVoYldVb0oyTmhiblpoY3ljcFd6QmRPMXh1SUNBZ0lISmxibVJsY21WeUxtbHVhWFFvWTJGdWRtRnpSV3dwTzF4dUlDQWdJR052Ym5OdmJHVXVhVzVtYnloeVpXNWtaWEpsY2lrN1hHNWNiaUFnSUNCeVpXNWtaWEpsY2k1a2NtRjNVbVZqZENneE1Dd2dNVEFzSURNd0xDQTRNQ3dnZXlCbWFXeHNPaUFuSTJSbFlTY2dmU2s3WEc0Z0lDQWdjbVZ1WkdWeVpYSXVaSEpoZDFKbFkzUW9OVEFzSURnd0xDQTRNQ3dnTWpBcE8xeHVmVnh1WEc1Y2JtbG1JQ2gwZVhCbGIyWWdkMmx1Wkc5M0lDRTlQU0FuZFc1a1pXWnBibVZrSnlrZ2UxeHVJQ0FnSUhkcGJtUnZkeTV5ZFc1RVpXMXZJRDBnY25WdVJHVnRienRjYm4xY2JseHVhV1lnS0hSNWNHVnZaaUJ0YjJSMWJHVWdJVDA5SUNkMWJtUmxabWx1WldRbktTQjdYRzRnSUNBZ2JXOWtkV3hsTG1WNGNHOXlkSE1nUFNCN0lISjFia1JsYlc4Z2ZUdGNibjFjYmlJc0ltTnNZWE56SUZKbGJtUmxjbVZ5SUh0Y2JpQWdJQ0JqYjI1emRISjFZM1J2Y2lncElIdGNiaUFnSUNBZ0lDQWdkR2hwY3k1allXNTJZWE1nUFNCdWRXeHNPMXh1SUNBZ0lDQWdJQ0IwYUdsekxtTjBlQ0E5SUc1MWJHdzdYRzRnSUNBZ2ZWeHVYRzRnSUNBZ2FXNXBkQ2hqWVc1MllYTkZiQ2tnZTF4dUlDQWdJQ0FnSUNCcFppQW9JU2hqWVc1MllYTkZiQ0JwYm5OMFlXNWpaVzltSUVoVVRVeEZiR1Z0Wlc1MEtTa2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ2RHaHliM2NnYm1WM0lFVnljbTl5S0NkU1pXNWtaWEpsY2lCdGRYTjBJR0psSUdsdWFYUnBZV3hwZW1Wa0lIZHBkR2dnWVc0Z1NGUk5URVZzWlcxbGJuUW5LVHRjYmlBZ0lDQWdJQ0FnZlZ4dVhHNGdJQ0FnSUNBZ0lHTmhiblpoYzBWc0xuZHBaSFJvSUQwZ1kyRnVkbUZ6Uld3dWIyWm1jMlYwVjJsa2RHZzdYRzRnSUNBZ0lDQWdJR05oYm5aaGMwVnNMbWhsYVdkb2RDQTlJR05oYm5aaGMwVnNMbTltWm5ObGRFaGxhV2RvZER0Y2JpQWdJQ0FnSUNBZ2RHaHBjeTVqWVc1MllYTWdQU0JqWVc1MllYTkZiRHRjYmlBZ0lDQWdJQ0FnZEdocGN5NWpkSGdnUFNCallXNTJZWE5GYkM1blpYUkRiMjUwWlhoMEtDY3laQ2NwTzF4dUlDQWdJSDFjYmx4dUlDQWdJR1J5WVhkU1pXTjBLSGdzSUhrc0lIY3NJR2dzSUhzZ1ptbHNiQ0I5SUQwZ2V5Qm1hV3hzT2lBbkl6QXdNREF3TUNjc0lIMHBJSHRjYmlBZ0lDQWdJQ0FnZEdocGN5NWpkSGd1Wm1sc2JGTjBlV3hsSUQwZ1ptbHNiRHRjYmlBZ0lDQWdJQ0FnZEdocGN5NWpkSGd1Wm1sc2JGSmxZM1FvZUN3Z2VTd2dkeXdnYUNrN1hHNGdJQ0FnZlZ4dWZWeHVYRzVqYjI1emRDQnlaVzVrWlhKbGNpQTlJRzVsZHlCU1pXNWtaWEpsY2lncE8xeHVYRzV0YjJSMWJHVXVaWGh3YjNKMGN5QTlJSHNnY21WdVpHVnlaWElnZlR0Y2JpSmRmUT09In0=
